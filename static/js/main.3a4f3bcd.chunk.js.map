{"version":3,"sources":["n2-features/f1-auth/a2-registration/r1-ui/Registration.module.css","n1-main/m1-ui/u1-header/Header.module.css","n2-features/f1-auth/a4-profile/user.png","n2-features/f1-auth/a4-profile/p1-ui/profile.module.css","n1-main/m1-ui/u3-common/c2-button/Button.module.css","n1-main/m3-dal/api.ts","n2-features/f1-auth/a1-login/l3-dal/loginAPI.ts","n2-features/f1-auth/a1-login/l2-bll/LoginReducer.ts","n1-main/m1-ui/u3-common/c3-input/Input.tsx","n1-main/m1-ui/u3-common/c2-button/Button.tsx","n2-features/f1-auth/a1-login/l1-ui/Login.tsx","n1-main/m1-ui/u2-routes/routes.js","n2-features/f1-auth/a2-registration/r3-dal/registrAPI.ts","n2-features/f1-auth/a2-registration/r2-bll/RegisterReducer.ts","n2-features/f1-auth/a2-registration/r1-ui/Registration.tsx","n1-main/m1-ui/u1-header/Header.tsx","n2-features/f1-auth/a3-restorePassword/res3-dal/restoreAPI.ts","n2-features/f1-auth/a3-restorePassword/res2-bll/RestorePasswordReducer.ts","n2-features/f1-auth/a3-restorePassword/res1-ui/RestorePassword.tsx","n2-features/f1-auth/a4-profile/p1-ui/profile.tsx","n2-features/а2-cards/c3-dal/cardsAPI.ts","n2-features/а2-cards/c2-bll/cardsReducer.ts","n2-features/а2-cards/c1-ui/Cards.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","n2-features/f1-auth/a4-profile/p2-bll/ProfileReducer.ts","n1-main/m2-bll/store.ts","index.tsx","n2-features/f1-auth/a1-login/l1-ui/Login.module.css"],"names":["module","exports","instance","axios","create","baseURL","loginAPI","email","password","rememberMe","post","then","res","loginInitialState","buttonName","buttonType","loading","inputType","isAuth","error","userName","token","LoginActions","type","Input","props","onChange","value","Button","load","classAdd","classes","primary","danger","alt","className","src","disabled","buttonDisabled","default","onClick","Login","useState","setEmail","setPassword","setRememberMe","setEmailCallback","useCallback","e","currentTarget","setPasswordCallback","setRememberMeCallback","checked","login","useSelector","state","dispatch","useDispatch","signInCallback","a","data","name","response","singIn","to","inputStyle","errorLogin","errorText","authAPI","initialState","serverAnswer","IS_FETCHING","IS_USER_AUTH","isFetching","setServerAnswer","Registration","reg","registration","postUserData","success","console","log","registrationThunk","length","Header","header","html1","html2","RestorePassword","restore","resetPasswordThunk","Profile","avatar","user","cardsAPI","get","cardPacks","Cards","cards","getCardsThunk","connect","isAuthByLogin","isAuthByRestore","isAuthByRegistration","params","path","component","Boolean","window","location","hostname","match","userId","reducers","combineReducers","action","profile","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","unregister","catch","message"],"mappings":"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","file":"static/js/main.3a4f3bcd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Registration_error__1PcbB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Bcrf\"};","module.exports = __webpack_public_path__ + \"static/media/user.93a57c9f.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"profile_avatar__2tPc2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3Uriw\",\"primary\":\"Button_primary__8KPpr\",\"danger\":\"Button_danger__14GBt\",\"load\":\"Button_load__1LC-H\"};","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://localhost:7542/1.0/'\r\n});\r\n","import {instance} from '../../../../n1-main/m3-dal/api';\r\n\r\ntype CommonApiType<T> = {\r\n    data: T\r\n}\r\n\r\nexport const loginAPI = {\r\n    // getAuth() {\r\n    //     return instance.get(`auth`);\r\n    // },\r\n    singIn (email: string, password: string, rememberMe: boolean)  {\r\n        return  instance.post('auth/login', {email, password, rememberMe})\r\n            .then(res => {\r\n                return res\r\n            })\r\n    }\r\n}","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {commonActionsType} from \"../../../../n1-main/m2-bll/actions\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {loginAPI} from \"../l3-dal/loginAPI\";\r\n\r\ntype loginStateType = {\r\n    buttonName: string\r\n    buttonType: Array<string>\r\n    loading: boolean\r\n    inputType: Array<string>\r\n    value?: string\r\n    isAuth: boolean\r\n    error: string\r\n    userName: string\r\n    token: string\r\n}\r\n\r\nconst loginInitialState: loginStateType = {\r\n    buttonName: 'Sign in',\r\n    buttonType: ['primary', 'danger'],\r\n    loading: false,\r\n    inputType: ['text', 'password', 'checkbox'],\r\n    isAuth: false,\r\n    error: '',\r\n    userName: '',\r\n    token: ''\r\n}\r\nconst LoginActions = {\r\n    setSuccess: (isAuth: boolean) => ({\r\n        type: 'login/SET_SUCCESS',\r\n        isAuth,\r\n    } as const),\r\n    setError: (error: string) => ({\r\n        type: 'login/SET_ERROR',\r\n        error,\r\n    } as const),\r\n    setLoading: (loading: boolean) => ({\r\n        type: 'login/SET_LOADING',\r\n        loading,\r\n    } as const),\r\n    setUserName: (userName: string) => ({\r\n        type: 'SET_USER_NAME',\r\n        userName\r\n    } as const),\r\n    setToken: (token:string) => ({\r\n        type: 'SET_TOKEN',\r\n        token\r\n    } as const)\r\n}\r\n\r\ntype LoginActionsType = commonActionsType<typeof LoginActions>;\r\n\r\nexport const LoginReducer = (state: loginStateType = loginInitialState, action: LoginActionsType): loginStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth,\r\n                loading: false,\r\n                error: ''\r\n            }\r\n        }\r\n        case 'login/SET_ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                loading: false,\r\n                isAuth: false,\r\n            }\r\n        }\r\n        case 'login/SET_LOADING': {\r\n            return {\r\n                ...state,\r\n                error: '',\r\n                loading: action.loading,\r\n                isAuth: false,\r\n            }\r\n        }\r\n        case 'SET_USER_NAME': {\r\n            return {\r\n                ...state, userName: action.userName\r\n            }\r\n        }\r\n        case 'SET_TOKEN': {\r\n            return {\r\n                ...state, token: action.token\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, LoginActionsType>\r\nexport type ThunkDispatchType = ThunkDispatch<AppStateType, {}, LoginActionsType>\r\n\r\nexport const singIn = (email: string, password: string, rememberMe: boolean): ThunkType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        dispatch(LoginActions.setLoading(true))\r\n        try {\r\n            const res = await loginAPI.singIn(email, password, rememberMe)\r\n            if (res.data) {\r\n\r\n                dispatch(LoginActions.setSuccess(true))\r\n                dispatch(LoginActions.setLoading(false))\r\n                dispatch(LoginActions.setUserName(res.data.name))\r\n                dispatch(LoginActions.setToken(res.data.token))\r\n            }\r\n        }catch (e) {\r\n            dispatch(LoginActions.setLoading(false))\r\n            dispatch(LoginActions.setError(e.response.data.error));\r\n\r\n        }\r\n    };\r\n\r\n","import React, {ChangeEvent} from 'react';\r\n\r\n\r\ntype OwnPropsType = {\r\n    inputType: string\r\n    value?: string\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\n\r\nconst Input = (props: OwnPropsType) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n               <input onChange={props.onChange}  type={props.inputType} value={props.value} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport classes from \"./Button.module.css\";\r\n\r\ntype OwnPropTypes = {\r\n    buttonName: string\r\n    buttonType: string\r\n    loading: boolean\r\n    onClick: () => void\r\n    buttonDisabled: boolean\r\n}\r\n\r\n\r\nconst Button = (props: OwnPropTypes) => {\r\n    let classAdd = '';\r\n    if (props.buttonType === 'primary' ) {\r\n        classAdd = classes.primary;\r\n    }\r\n    if (props.buttonType === 'danger' ) {\r\n        classAdd = classes.danger;\r\n    }\r\n    let load;\r\n    if (props.loading) {\r\n        load = <img alt='loading' className={classes.load}\r\n                    src='https://upload.wikimedia.org/wikipedia/commons/b/b9/Youtube_loading_symbol_1_(wobbly).gif'/>\r\n    }\r\n\r\n    if (props.loading) {\r\n        classAdd = classes.primary;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button disabled={props.buttonDisabled} className={classes.default + ' ' + classAdd} onClick={props.onClick}>{load} {props.buttonName}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {connect, useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {profile, restore} from \"../../../../n1-main/m1-ui/u2-routes/routes\";\r\nimport {singIn} from \"../l2-bll/LoginReducer\";\r\nimport Input from \"../../../../n1-main/m1-ui/u3-common/c3-input/Input\";\r\nimport Button from '../../../../n1-main/m1-ui/u3-common/c2-button/Button';\r\nimport classes from \"./Login.module.css\";\r\n\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\r\n\r\n    const setEmailCallback = useCallback((e: ChangeEvent<HTMLInputElement>): void => setEmail(e.currentTarget.value), [setEmail]);\r\n    const setPasswordCallback = useCallback((e: ChangeEvent<HTMLInputElement>): void => setPassword(e.currentTarget.value), [setPassword]);\r\n    const setRememberMeCallback = useCallback((e: ChangeEvent<HTMLInputElement>): void => setRememberMe(e.currentTarget.checked), [setRememberMe]);\r\n\r\n\r\n    const login: any = useSelector<AppStateType>(state => state.login)\r\n    const dispatch = useDispatch();\r\n\r\n    const signInCallback = useCallback(\r\n        () => dispatch(singIn(email, password, rememberMe)),\r\n        [email, password, rememberMe, dispatch]\r\n    );\r\n\r\n    if (login.isAuth) {\r\n        return <Redirect to={profile}/>\r\n    }\r\n    const inputStyle = login.error !== '' ? classes.errorLogin : ''\r\n    const buttonDisabled = login.loading ? true : false\r\n    return (\r\n\r\n        <form>\r\n            <div className={classes.errorText}>{login.error}</div>\r\n            <div className={inputStyle}>\r\n                Login <Input onChange={setEmailCallback} value={login.value} inputType={login.inputType[0]}/>\r\n            </div>\r\n            <div className={inputStyle}>\r\n                Password <Input onChange={setPasswordCallback} value={login.value} inputType={login.inputType[1]}/>\r\n            </div>\r\n            <div>\r\n                Remember me <Input onChange={setRememberMeCallback} value={login.value} inputType={login.inputType[2]}/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={restore}>Forgot password?</NavLink>\r\n            </div>\r\n            <Button buttonDisabled={buttonDisabled} onClick={signInCallback} loading={login.loading}\r\n                    buttonType={login.error !== '' ? login.buttonType[1] : login.buttonType[0] } buttonName={login.buttonName}/>\r\n\r\n        </form>\r\n    )\r\n\r\n}\r\n","export const login = '/login';\r\nexport const registration = '/registration';\r\nexport const restore = '/restorePassword';\r\nexport const profile = '/profile';\r\nexport const logout = '/logout';","import {instance} from \"../../../../n1-main/m3-dal/api\";\r\n\r\ntype RegistrationType = {\r\n    addedUser: {\r\n        email: string,\r\n        isAdmin: boolean,\r\n        __v: number,\r\n        _id: string\r\n    },\r\n    success: boolean\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post<RegistrationType>('auth/register', {\r\n                email,\r\n                password\r\n            }\r\n        )\r\n            .then(res => res.data)\r\n    }\r\n}","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport { authAPI } from \"../r3-dal/registrAPI\";\r\n\r\n\r\n\r\ntype initialStateType = {\r\n    buttonName: string\r\n    buttonType: Array<string>\r\n    loading: boolean\r\n    inputType: Array<string>\r\n    value?: string\r\n    isAuth: boolean\r\n    serverAnswer: string\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    buttonName: 'Sign up',\r\n    buttonType: ['primary', 'danger'],\r\n    loading: false,\r\n    inputType: ['text', 'password'],\r\n    isAuth: false,\r\n    serverAnswer: ''\r\n}\r\n\r\nconst IS_FETCHING = 'REGISTRATION/IS_FETCHING';\r\nconst IS_USER_AUTH = 'REGISTRATION/IS_USER_AUTH';\r\nconst SET_SERVER_ANSWER = 'REGISTRATION/SET_SERVER_ANSWER';\r\n\r\n\r\n\r\nexport const RegisterReducer = (state: initialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case IS_FETCHING: {\r\n            return {\r\n                ...state, loading: action.loading\r\n            }\r\n        }\r\n        case IS_USER_AUTH : {\r\n            return {\r\n                ...state, isAuth: action.isAuth\r\n            }\r\n        }\r\n        case SET_SERVER_ANSWER : {\r\n            return {\r\n                ...state, serverAnswer: action.serverAnswer\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = isFetchingType | isUserAuthType | setServerAnswerType;\r\n\r\ntype isFetchingType = {\r\n    type: typeof IS_FETCHING,\r\n    loading: boolean\r\n}\r\nexport const isFetching = (loading: boolean): isFetchingType => ({type: IS_FETCHING, loading});\r\n\r\ntype isUserAuthType = {\r\n    type: typeof IS_USER_AUTH,\r\n    isAuth: boolean\r\n}\r\nexport const isUserAuth = (isAuth: boolean): isUserAuthType => ({type: IS_USER_AUTH, isAuth});\r\n\r\ntype setServerAnswerType = {\r\n    type: typeof SET_SERVER_ANSWER,\r\n    serverAnswer: string\r\n}\r\n\r\nexport const setServerAnswer = (serverAnswer: string): setServerAnswerType => ({type: SET_SERVER_ANSWER, serverAnswer});\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype DispatchThunk = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\n\r\nexport const registrationThunk = (email: string, password: string): ThunkType => async (dispatch: DispatchThunk) => {\r\n    dispatch(isFetching(true));\r\n    let response = await authAPI.registration(email, password);\r\n    if (response.success === true) {\r\n        dispatch(isFetching(false));\r\n        dispatch(isUserAuth(true));\r\n        dispatch(setServerAnswer('ok'))\r\n    } else {\r\n        dispatch(setServerAnswer('some error'))\r\n        console.log('Such a user has already been created')\r\n        dispatch(isFetching(false));\r\n    }\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport Button from \"../../../../n1-main/m1-ui/u3-common/c2-button/Button\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Input from \"../../../../n1-main/m1-ui/u3-common/c3-input/Input\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {login} from \"../../../../n1-main/m1-ui/u2-routes/routes\";\r\nimport {registrationThunk} from \"../r2-bll/RegisterReducer\";\r\nimport classes from \"./Registration.module.css\";\r\n\r\n\r\nexport const Registration = () => {\r\n    const reg: any = useSelector<AppStateType>(state => state.registration)\r\n    const dispatch = useDispatch();\r\n\r\n    const [email, setEmail] = useState('oxa@gmail.com')\r\n    const [password, setPassword] = useState('!12345!123')\r\n\r\n    const setEmailCallback = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail])\r\n\r\n    const setPasswordCallback = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\r\n        setPassword(e.currentTarget.value)\r\n    }, [setPassword])\r\n\r\n    const postUserData = useCallback(\r\n        () => dispatch(registrationThunk(email, password)),\r\n        [email, password, dispatch]\r\n    );\r\n\r\n    const buttonDisabled = reg.loading ? true : false\r\n\r\n    if (reg.isAuth) {\r\n        return <Redirect to={login}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                Your e-mail <Input onChange={setEmailCallback} value={email} inputType={reg.inputType[0]}/>\r\n            </div>\r\n            <div>\r\n                Your password <Input onChange={setPasswordCallback} value={password} inputType={reg.inputType[1]}/>\r\n            </div>\r\n            <div>{password.length <= 7 && <span className={classes.error}>Password length must be more then 7</span>}</div>\r\n\r\n            {reg.serverAnswer === 'some error' && <span>{reg.serverAnswer}</span>}\r\n\r\n            <Button buttonDisabled={buttonDisabled} onClick={postUserData} loading={reg.loading}\r\n                    buttonType={reg.serverAnswer !== '' ? reg.buttonType[1] : reg.buttonType[0]}\r\n                    buttonName={reg.buttonName}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport classes from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {login, registration} from \"../u2-routes/routes\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../m2-bll/store\";\r\n\r\n\r\nexport const Header = () => {\r\n\r\n    const loginState: any = useSelector<AppStateType>(state => state.login)\r\n\r\n    return (<div className={classes.header}>\r\n             <div>\r\n                    <NavLink to={login}> Sign in </NavLink> |\r\n                    <NavLink to={registration}> Sign up </NavLink>\r\n                </div>\r\n                {/*: <div>*/}\r\n                {/*    <NavLink to={logout}> Log out </NavLink>*/}\r\n                {/*</div>}*/}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import {instance} from \"../../../../n1-main/m3-dal/api\";\r\n\r\nexport const authAPI = {\r\n    restorePassword(email: string){\r\n        return instance.post<any>('auth/forgot', {\r\n            email,\r\n            html1: \"<a href='http://localhost:3000/cards#/restorePassword/\",\r\n            html2: \"'>reset-password-link</a>\"\r\n        }).then(res => res.data)\r\n    }\r\n}","\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {authAPI} from \"../res3-dal/restoreAPI\";\r\n\r\n\r\ntype initialStateType = {\r\n    buttonName: string\r\n    buttonType: Array<string>\r\n    loading: boolean\r\n    inputType: Array<string>\r\n    value?: string\r\n    isAuth: boolean\r\n    serverAnswer: string\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    buttonName: 'Send password',\r\n    buttonType: ['primary', 'danger'],\r\n    loading: false,\r\n    inputType: ['text', 'password'],\r\n    isAuth: false,\r\n    serverAnswer: ''\r\n}\r\nconst SET_SERVER_ANSWER = 'RESTORE_PASSWORD/SET_SERVER_ANSWER';\r\n\r\nexport const RestorePasswordReducer = (state: initialStateType = initialState, action : any) => {\r\n    switch (action.type) {\r\n        case SET_SERVER_ANSWER: {\r\n            return {\r\n                ...state, serverAnswer: action.serverAnswer\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, any>\r\ntype DispatchThunk = ThunkDispatch<AppStateType, unknown, any>\r\n\r\ntype setServerAnswerType = {\r\n    type: typeof SET_SERVER_ANSWER,\r\n    serverAnswer: string\r\n}\r\nconst setServerAnswer = (serverAnswer: string): setServerAnswerType => ({type: SET_SERVER_ANSWER, serverAnswer});\r\n\r\nexport const resetPasswordThunk =(email: string):ThunkType => async (dispatch:DispatchThunk) => {\r\n    let res = await authAPI.restorePassword(email);\r\n    if (res.success) {\r\n        dispatch(setServerAnswer('ok'))\r\n    } else {\r\n        dispatch(setServerAnswer('some error'))\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../../../n1-main/m1-ui/u2-routes/routes\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Input from '../../../../n1-main/m1-ui/u3-common/c3-input/Input';\r\nimport Button from \"../../../../n1-main/m1-ui/u3-common/c2-button/Button\";\r\nimport {resetPasswordThunk} from \"../res2-bll/RestorePasswordReducer\";\r\n\r\n\r\nexport const RestorePassword = () => {\r\n    const restore: any = useSelector<AppStateType>(state => state.restore)\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState('');\r\n\r\n    const setEmailCallback = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail])\r\n\r\n\r\n    const onClick = () => {\r\n        dispatch(resetPasswordThunk(email));\r\n    }\r\n\r\n     const buttonDisabled = restore.loading ? true : false\r\n    return (\r\n        <div>\r\n            Enter your e-mail <Input onChange={setEmailCallback} value={restore.value} inputType={restore.inputType[0]}/>\r\n\r\n           <NavLink to={login}> <Button buttonDisabled={buttonDisabled} onClick={onClick} loading={restore.loading}\r\n                                          buttonType={restore.buttonType} buttonName={restore.buttonName}/></NavLink>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport user from '../user.png';\r\nimport classes from \"./profile.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const userName: any = useSelector<AppStateType>(state => state.login.userName)\r\n\r\n    return (\r\n        <div>\r\n            <img className={classes.avatar} alt='user' src={user}/> {userName}\r\n\r\n            <NavLink to={'/cards'}> Cards </NavLink>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {instance} from \"../../../n1-main/m3-dal/api\";\r\n\r\n\r\nexport const cardsAPI = {\r\n\r\n    getCards(token: string)  {\r\n        return  instance.get<any>(`cards/pack&token=${token}`)\r\n            .then(res => {\r\n                return res\r\n            })\r\n    }\r\n}\r\n\r\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {authAPI} from \"../../f1-auth/a2-registration/r3-dal/registrAPI\";\r\nimport {isFetching, isUserAuth, setServerAnswer} from \"../../f1-auth/a2-registration/r2-bll/RegisterReducer\";\r\nimport {cardsAPI} from \"../c3-dal/cardsAPI\";\r\n\r\ntype initialStateType = {\r\n    cardPacks: Array<any>\r\n\r\n}\r\nconst initialState = {\r\n    cardPacks: []\r\n}\r\n\r\nconst GET_CARD_PACKS = 'GET_CARD_PACKS'\r\n\r\nexport const cardsReducer = (state:initialStateType= initialState, action : any) => {\r\n    switch (action.type) {\r\n        case GET_CARD_PACKS: {\r\n            return {\r\n                ...state, cardPacks: action.cardPacks\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype getCardsType = {\r\n    type: typeof GET_CARD_PACKS,\r\n    cardPacks: Array<any>\r\n}\r\nconst getCards = (cardPacks: Array<any>):getCardsType => ({type: GET_CARD_PACKS, cardPacks})\r\n\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, any>\r\nexport type ThunkDispatchType = ThunkDispatch<AppStateType, {}, any>\r\n\r\nexport const getCardsThunk = (token: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    let response = await cardsAPI.getCards(token);\r\n    dispatch(getCards(response.data))\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {connect, useDispatch, useSelector} from 'react-redux';\r\n\r\nimport classes from \"./Cards.module.css\";\r\nimport {AppStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport { getCardsThunk } from '../c2-bll/cardsReducer';\r\n\r\n\r\n\r\n\r\nexport const Cards = () => {\r\n    const cards: any = useSelector<AppStateType>(state => state.cards.cardPacks)\r\n    const token: any = useSelector<AppStateType>(state => state.login.token)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const getCards = () => {\r\n        dispatch(getCardsThunk(token))\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <button onClick={getCards}>Get cards</button>\r\n            {cards}\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport {Login} from \"../../n2-features/f1-auth/a1-login/l1-ui/Login\";\r\nimport {Registration} from \"../../n2-features/f1-auth/a2-registration/r1-ui/Registration\";\r\nimport {Header} from \"./u1-header/Header\";\r\nimport {login, profile, registration, restore} from \"./u2-routes/routes\";\r\nimport Particles from 'react-particles-js';\r\nimport {RestorePassword} from \"../../n2-features/f1-auth/a3-restorePassword/res1-ui/RestorePassword\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../m2-bll/store\";\r\nimport {Profile} from \"../../n2-features/f1-auth/a4-profile/p1-ui/profile\";\r\nimport {Cards} from \"../../n2-features/а2-cards/c1-ui/Cards\";\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuthByLogin: boolean\r\n    isAuthByRestore: boolean\r\n    isAuthByRegistration: boolean\r\n}\r\n\r\nconst App = (props: MapStateToPropsType) => {\r\n    const particleOpts = {\r\n        \"particles\": {\r\n            \"number\": {\r\n                \"value\": 50,\r\n                \"density\": {\r\n                    \"enable\": true,\r\n                    \"value_area\": 800\r\n                }\r\n            },\r\n            \"color\": {\r\n                \"value\": \"#715858\"\r\n            },\r\n            \"line_linked\": {\r\n                \"enable\": true,\r\n                \"distance\": 150,\r\n                \"color\": \"#E6E6FA\",\r\n                \"opacity\": 0.4,\r\n                \"width\": 1\r\n            },\r\n            \"shape\": {\r\n                \"type\": \"circle\",\r\n                \"stroke\": {\r\n                    \"width\": 0,\r\n                    \"color\": \"#000000\"\r\n                },\r\n                \"polygon\": {\r\n                    \"nb_sides\": 5\r\n                },\r\n            },\r\n            \"size\": {\r\n                \"value\": 20,\r\n                \"random\": true,\r\n                \"anim\": {\r\n                    \"enable\": false,\r\n                    \"speed\": 40,\r\n                    \"size_min\": 0.1,\r\n                    \"sync\": false\r\n                }\r\n            }, \"interactivity\": {\r\n                \"detect_on\": \"canvas\",\r\n                \"events\": {\r\n                    \"onhover\": {\r\n                        \"enable\": true,\r\n                        \"mode\": \"repulse\"\r\n                    },\r\n                    \"onclick\": {\r\n                        \"enable\": true,\r\n                        \"mode\": \"push\"\r\n                    },\r\n                    \"resize\": true\r\n                },\r\n                \"modes\": {\r\n                    \"grab\": {\r\n                        \"distance\": 400,\r\n                        \"line_linked\": {\r\n                            \"opacity\": 1\r\n                        }\r\n                    },\r\n                    \"bubble\": {\r\n                        \"distance\": 400,\r\n                        \"size\": 40,\r\n                        \"duration\": 2,\r\n                        \"opacity\": 8,\r\n                        \"speed\": 3\r\n                    },\r\n                    \"repulse\": {\r\n                        \"distance\": 200\r\n                    },\r\n                    \"push\": {\r\n                        \"particles_nb\": 4\r\n                    },\r\n                    \"remove\": {\r\n                        \"particles_nb\": 2\r\n                    }\r\n                },\r\n                \"move\": {\r\n                    \"enable\": true,\r\n                    \"speed\": 6,\r\n                    \"direction\": \"none\",\r\n                    \"random\": false,\r\n                    \"straight\": false,\r\n                    \"out_mode\": \"out\",\r\n                    \"attract\": {\r\n                        \"enable\": false,\r\n                        \"rotateX\": 600,\r\n                        \"rotateY\": 1200\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const isAuth = props.isAuthByLogin || props.isAuthByRegistration || props.isAuthByRestore;\r\n\r\n    return (\r\n        <div className='App'>\r\n            <HashRouter>\r\n                <Particles className='particles' params={particleOpts}/>\r\n                <Header/>\r\n                <Route path={login} component={Login}/>\r\n                <Route path={registration} component={Registration}/>\r\n                <Route path={restore} component={RestorePassword}/>\r\n                <Route path={profile} component={Profile}/>\r\n                <Route path={'/cards'} component={Cards}/>\r\n\r\n\r\n                {!isAuth &&\r\n                <div className='main'>\r\n                    <span className='welcome'> Welcome to ANOX! </span>\r\n                    <div>\r\n                        Study different things with us!\r\n                    </div>\r\n                </div>\r\n                }\r\n\r\n\r\n\r\n\r\n            </HashRouter>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuthByLogin: state.login.isAuth,\r\n        isAuthByRestore: state.restore.isAuth,\r\n        isAuthByRegistration: state.registration.isAuth\r\n\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, {}, {}, AppStateType>(mapStateToProps, {})(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {authAPI} from \"../../a3-restorePassword/res3-dal/restoreAPI\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {loginAPI} from \"../../a1-login/l3-dal/loginAPI\";\r\n\r\ntype initialStateType = {\r\n    userId: string\r\n    userName: string\r\n\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    userId: '1',\r\n    userName: 'Oxana'\r\n}\r\n\r\nconst SET_USER_NAME = 'SET_USER_NAME';\r\n\r\nexport const ProfileReducer = (state: initialStateType = initialState, action : any) => {\r\n    switch (action.type) {\r\n        case SET_USER_NAME: {\r\n            return {\r\n                ...state, userName: action.userName\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\ntype SetUserNameType = {\r\n    type: typeof SET_USER_NAME\r\n    userName: string\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, any>\r\ntype DispatchThunk = ThunkDispatch<AppStateType, unknown, any>\r\n\r\nconst setUserName = (userName: string):SetUserNameType => ({type: SET_USER_NAME, userName})\r\n\r\n// export const setUserNameThunk =(email: string, password: string, rememberMe: boolean):ThunkType => async (dispatch:DispatchThunk) => {\r\n//     debugger\r\n//     let res = await loginAPI.singIn(email, password, rememberMe);\r\n//     if(res.data.success) {\r\n//         dispatch(setUserName(email))\r\n//     }\r\n//\r\n// }\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {LoginReducer} from \"../../n2-features/f1-auth/a1-login/l2-bll/LoginReducer\";\r\nimport {RegisterReducer} from \"../../n2-features/f1-auth/a2-registration/r2-bll/RegisterReducer\";\r\nimport {RestorePasswordReducer} from \"../../n2-features/f1-auth/a3-restorePassword/res2-bll/RestorePasswordReducer\";\r\nimport {ProfileReducer} from \"../../n2-features/f1-auth/a4-profile/p2-bll/ProfileReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {cardsReducer} from \"../../n2-features/а2-cards/c2-bll/cardsReducer\";\r\n\r\n\r\n\r\nconst reducers = combineReducers({\r\n    login: LoginReducer,\r\n    registration: RegisterReducer,\r\n    restore: RestorePasswordReducer,\r\n    profile: ProfileReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\ntype RootReducersType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducersType>;\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./n1-main/m2-bll/store\";\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorLogin\":\"Login_errorLogin__3BSRQ\",\"errorText\":\"Login_errorText__2vKpa\",\"formSummaryError\":\"Login_formSummaryError__2jPBp\"};"],"sourceRoot":""}